Exercise 8.1
  a. Submit solutions to tasks 1â€“5.
    1. Counts row unnecessary & Some columns have really high max values 
    2. Difference between training data and validation data
    3. Uncomment very last line of a first code in validation.ipynb to allow randomization.
    4.	
       training_input_fn = lambda: my_input_fn(
         training_examples, 
         training_targets['median_house_value'],
         batch_size=batch_size)
       
       predict_training_input_fn = lambda: my_input_fn(
         training_examples,
         training_targets['median_house_value'],
         num_epochs=1,
         shuffle=False)
       
       predict_validation_input_fn = lambda: my_input_fn(
         validation_examples, 
         validation_targets['median_house_value'],
         num_epochs=1,
         shuffle=False)
       
       training_predictions = linear_regressor.predict(input_fn=predict_training_input_fn)
       training_predictions = np.array([item['predictions'][0] for item in training_predictions])
       
       validation_predictions = linear_regressor.predict(input_fn=predict_validation_input_fn)
       validation_predictions = np.array([item['predictions'][0] for item in validation_predictions])
       
       linear_regressor = train_model(
         learning_rate=0.00003,
         steps=500,
         batch_size=5,
         training_examples=training_examples,
         training_targets=training_targets,
         validation_examples=validation_examples,
         validation_targets=validation_targets)

    5.
       california_housing_test_data = pd.read_csv("https://download.mlcc.google.com/mledu-datasets/california_housing_test.csv", sep=",")
       
       test_features = preprocess_features(california_housing_test_data)
       test_targets = preprocess_targets(california_housing_test_data)
       
       predict_test_input_fn = lambda: my_input_fn(
             test_features, 
             test_targets["median_house_value"], 
             num_epochs=1, 
             shuffle=False)
       
       test_predictions = linear_regressor.predict(input_fn=predict_test_input_fn)
       test_predictions = np.array([item['predictions'][0] for item in test_predictions])
       
       root_mean_squared_error = math.sqrt(
           metrics.mean_squared_error(test_predictions, test_targets))
       
       print("Root Mean Squared Error (on data): %0.2f" % root_mean_squared_error)

       RMSE = 161.19

	   The RMSE of the test data was close to the RMSE of training data. This shows that our model is performing correctly in predicting the data.

  b. Give a one-paragraph summary of what you learned about using training, validation and testing datasets.
    Training model requires more dataset than validation, but it is important to randomize the dataset to allow validation data to not defer completely from the training data. This allows proper estimation of the trained algorithm's performance to later tune the model's hyper parameter.